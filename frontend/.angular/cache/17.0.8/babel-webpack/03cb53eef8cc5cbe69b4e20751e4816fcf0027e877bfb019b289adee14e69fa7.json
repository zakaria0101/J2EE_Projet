{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { of } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { ProductInfo } from \"../models/productInfo\";\nimport { apiUrl } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http) {\n      this.http = http;\n      this.productUrl = `${apiUrl}/product`;\n      this.categoryUrl = `${apiUrl}/category`;\n    }\n    getAllInPage(page, size) {\n      const url = `${this.productUrl}?page=${page}&size=${size}`;\n      return this.http.get(url).pipe();\n    }\n    getCategoryInPage(categoryType, page, size) {\n      const url = `${this.categoryUrl}/${categoryType}?page=${page}&size=${size}`;\n      return this.http.get(url).pipe();\n    }\n    getDetail(id) {\n      const url = `${this.productUrl}/${id}`;\n      return this.http.get(url).pipe(catchError(_ => {\n        console.log(\"Get Detail Failed\");\n        return of(new ProductInfo());\n      }));\n    }\n    update(productInfo) {\n      const url = `${apiUrl}/seller/product/${productInfo.productId}/edit`;\n      return this.http.put(url, productInfo);\n    }\n    create(productInfo) {\n      const url = `${apiUrl}/seller/product/new`;\n      return this.http.post(url, productInfo);\n    }\n    delelte(productInfo) {\n      const url = `${apiUrl}/seller/product/${productInfo.productId}/delete`;\n      return this.http.delete(url);\n    }\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n    handleError(operation = \"operation\", result) {\n      return error => {\n        console.error(error); // log to console instead\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n    static #_ = this.ɵfac = function ProductService_Factory(t) {\n      return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}