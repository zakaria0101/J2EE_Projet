{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { UserService } from \"../services/user.service\";\nimport { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user.service\";\nimport * as i2 from \"@angular/router\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(userService, router) {\n      this.userService = userService;\n      this.router = router;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        if (err.status === 401) {\n          // auto logout if 401 response returned from api\n          this.userService.logout();\n          this.router.navigate(['/login']);\n        }\n        const error = err.error || err.statusText;\n        return throwError(error);\n      }));\n    }\n    static #_ = this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}