{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { apiUrl } from '../../environments/environment';\nimport { BehaviorSubject, of, Subject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { CookieService } from 'ngx-cookie-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, cookieService) {\n      this.http = http;\n      this.cookieService = cookieService;\n      this.nameTerms = new Subject();\n      this.name$ = this.nameTerms.asObservable();\n      const memo = localStorage.getItem('currentUser');\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(memo));\n      this.currentUser = this.currentUserSubject.asObservable();\n      cookieService.set('currentUser', memo);\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    login(loginForm) {\n      const url = `${apiUrl}/login`;\n      return this.http.post(url, loginForm).pipe(tap(user => {\n        if (user && user.token) {\n          this.cookieService.set('currentUser', JSON.stringify(user));\n          if (loginForm.remembered) {\n            localStorage.setItem('currentUser', JSON.stringify(user));\n          }\n          console.log(user.name);\n          this.nameTerms.next(user.name);\n          this.currentUserSubject.next(user);\n          return user;\n        }\n      }), catchError(this.handleError('Login Failed', null)));\n    }\n    logout() {\n      this.currentUserSubject.next(null);\n      localStorage.removeItem('currentUser');\n      this.cookieService.delete('currentUser');\n    }\n    signUp(user) {\n      const url = `${apiUrl}/register`;\n      return this.http.post(url, user);\n    }\n    update(user) {\n      const url = `${apiUrl}/profile`;\n      return this.http.put(url, user);\n    }\n    get(email) {\n      const url = `${apiUrl}/profile/${email}`;\n      return this.http.get(url);\n    }\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.log(error); // log to console instead\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n    static #_ = this.ɵfac = function UserService_Factory(t) {\n      i0.ɵɵinvalidFactory();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}