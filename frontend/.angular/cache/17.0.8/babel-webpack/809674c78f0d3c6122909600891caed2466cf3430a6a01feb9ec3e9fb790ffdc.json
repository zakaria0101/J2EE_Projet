{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { apiUrl } from '../../environments/environment';\nimport { CookieService } from 'ngx-cookie-service';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { UserService } from './user.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nimport * as i3 from \"./user.service\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(http, cookieService, userService) {\n      this.http = http;\n      this.cookieService = cookieService;\n      this.userService = userService;\n      this.cartUrl = `${apiUrl}/cart`;\n      this.localMap = {};\n      this.itemsSubject = new BehaviorSubject(null);\n      this.items = this.itemsSubject.asObservable();\n      this.totalSubject = new BehaviorSubject(null);\n      this.total = this.totalSubject.asObservable();\n      this.userService.currentUser.subscribe(user => this.currentUser = user);\n    }\n    getLocalCart() {\n      if (this.cookieService.check('cart')) {\n        this.localMap = JSON.parse(this.cookieService.get('cart'));\n        return Object.values(this.localMap);\n      } else {\n        this.localMap = {};\n        return [];\n      }\n    }\n    getCart() {\n      const localCart = this.getLocalCart();\n      if (this.currentUser) {\n        if (localCart.length > 0) {\n          return this.http.post(this.cartUrl, localCart).pipe(tap(_ => {\n            this.clearLocalCart();\n          }), map(cart => cart.products), catchError(_ => of([])));\n        } else {\n          return this.http.get(this.cartUrl).pipe(map(cart => cart.products), catchError(_ => of([])));\n        }\n      } else {\n        return of(localCart);\n      }\n    }\n    addItem(productInOrder) {\n      if (!this.currentUser) {\n        if (this.cookieService.check('cart')) {\n          this.localMap = JSON.parse(this.cookieService.get('cart'));\n        }\n        if (!this.localMap[productInOrder.productId]) {\n          this.localMap[productInOrder.productId] = productInOrder;\n        } else {\n          this.localMap[productInOrder.productId].count += productInOrder.count;\n        }\n        this.cookieService.set('cart', JSON.stringify(this.localMap));\n        return of(true);\n      } else {\n        const url = `${this.cartUrl}/add`;\n        return this.http.post(url, {\n          'quantity': productInOrder.count,\n          'productId': productInOrder.productId\n        });\n      }\n    }\n    update(productInOrder) {\n      if (this.currentUser) {\n        const url = `${this.cartUrl}/${productInOrder.productId}`;\n        return this.http.put(url, productInOrder.count);\n      }\n    }\n    remove(productInOrder) {\n      if (!this.currentUser) {\n        delete this.localMap[productInOrder.productId];\n        return of(null);\n      } else {\n        const url = `${this.cartUrl}/${productInOrder.productId}`;\n        return this.http.delete(url).pipe();\n      }\n    }\n    checkout() {\n      const url = `${this.cartUrl}/checkout`;\n      return this.http.post(url, null).pipe();\n    }\n    storeLocalCart() {\n      this.cookieService.set('cart', JSON.stringify(this.localMap));\n    }\n    clearLocalCart() {\n      console.log('clear local cart');\n      this.cookieService.delete('cart');\n      this.localMap = {};\n    }\n    static #_ = this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService), i0.ɵɵinject(i3.UserService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}